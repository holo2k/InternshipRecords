@page "/directions-projects"
@using InternshipRecords.Client.Services
@using InternshipRecords.Client.Services.Intern
@using Shared.Models.Project
@using Shared.Models.Intern
@using Shared.Models.Direction
@inject DirectionService DirectionService
@inject ProjectService ProjectService
@inject InternService InternService
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="card container-card">
    <h3>Направления и проекты</h3>

    <div class="tabs">
        <button class="tab-button @(_activeTab == "directions" ? "active" : "")" @onclick="SwitchTabDepartments">
            Направления
        </button>
        <button class="tab-button @(_activeTab == "projects" ? "active" : "")" @onclick="SwitchTabProjects">
            Проекты
        </button>
    </div>

    <div class="controls-row">
        <div class="search-sort">
            <input placeholder="Поиск" @bind="_searchTerm" @bind:event="oninput" class="form-control search-input" />
            <select class="form-control sort-select" @onchange="SortChanged">
                <option value="name">Сортировать по названию</option>
                <option value="count">Сортировать по количеству стажеров</option>
            </select>
        </div>
    </div>

    <div class="tab-content">
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="alert alert-danger mt-2">@_errorMessage</div>
        }
        @if (_activeTab == "directions")
        {
            <div class="grid-add">
                <input placeholder="Новое направление" @bind="_newDirectionName" class="form-control"/>
                <input placeholder="Описание направления" @bind="_newDirectionDescription" class="form-control"/>

                <label>Прикрепить стажёров</label>
                <div>
                    <select multiple class="form-control" @onchange="OnDirectionInternsChanged" style="margin-bottom:8px">
                        @foreach (var intern in _allInterns)
                        {
                            <option value="@intern.Id">@intern.FirstName @intern.LastName</option>
                        }
                    </select>
                </div>

                <button class="btn btn-primary" @onclick="AddDirection">Добавить направление</button>
            </div>

            @if (FilteredDirections.Any())
            {
                <ul class="items-list">
                    @foreach (var direction in FilteredDirections)
                    {
                        <li class="list-item">
                            <div class="item-top">
                                <div>
                                    <strong class="item-title">@direction.Direction.Name</strong>
                                    <div class="item-description">@direction.Direction.Description</div>
                                    <div class="muted">(@direction.InternCount стажеров)</div>
                                </div>
                                <div class="item-actions">
                                    <button class="btn btn-sm" @onclick="() => ToggleInterns(direction)">
                                        @(direction.ShowInterns ? "Скрыть" : "Показать")
                                    </button>
                                    <button class="btn btn-sm" @onclick="() => EditDirection(direction)">Редактировать</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteDirection(direction)">Удалить</button>
                                </div>
                            </div>

                            @if (direction.ShowInterns)
                            {
                                @if (direction.Interns.Any())
                                {
                                    <ul class="interns-sublist">
                                        @foreach (var intern in direction.Interns)
                                        {
                                            <li>@intern.FirstName @intern.LastName</li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <p class="muted">Нет стажеров в этом направлении</p>
                                }
                            }
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>Направления не найдены</p>
            }
        }
        else if (_activeTab == "projects")
        {
            <div class=" grid-add">
                 <input placeholder="Новый проект" @bind="_newProjectName" class="form-control"/>
                 <input placeholder="Описание проекта" @bind="_newProjectDescription" class="form-control"/>

                 <label>Прикрепить стажёров</label>
                 <select multiple class="form-control" @onchange="OnProjectInternsChanged">
                     @foreach (var intern in _allInterns)
                     {
                         <option value="@intern.Id">@intern.FirstName @intern.LastName</option>
                     }
                 </select>

                 <button class="btn btn-primary" @onclick="AddProject">Добавить проект</button>
            </div>

            @if (FilteredProjects.Any())
            {
                <ul class="items-list">
                    @foreach (var project in FilteredProjects)
                    {
                        <li class="list-item">
                            <div class="item-top">
                                <div>
                                    <strong class="item-title">@project.Project!.Name</strong>
                                    <div class="item-description">@project.Project.Description</div>
                                    <div class="muted">(@project.InternCount стажеров)</div>
                                </div>
                                <div class="item-actions">
                                    <button class="btn btn-sm" @onclick="() => ToggleInterns(project)">
                                        @(project.ShowInterns ? "Скрыть" : "Показать")
                                    </button>
                                    <button class="btn btn-sm" @onclick="() => EditProject(project)">Редактировать</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteProject(project)">Удалить</button>
                                </div>
                            </div>

                            @if (project.ShowInterns)
                            {
                                @if (project.Interns.Any())
                                {
                                    <ul class="interns-sublist">
                                        @foreach (var intern in project.Interns)
                                        {
                                            <li>@intern.FirstName @intern.LastName</li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <p class="muted">Нет стажеров в этом проекте</p>
                                }
                            }
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>Проекты не найдены</p>
            }
        }
    </div>

    <div class="pagination mt-3">
        <button class="btn btn-outline" @onclick="PrevPage" disabled="@(_currentPage <= 1)">Назад</button>
        <span>Страница @_currentPage</span>
        <button class="btn btn-outline" @onclick="NextPage" disabled="@(!HasNextPage)">Вперед</button>
        <select @bind="_pageSize" class="form-control page-size" style="width:120px; display:inline-block; margin-left:8px;">
            <option value="5">5 на странице</option>
            <option value="10">10 на странице</option>
            <option value="20">20 на странице</option>
        </select>
    </div>
</div>

@code {
    private string _activeTab = "directions";
    private string _searchTerm = "";
    private string _sortBy = "name";
    private string _newDirectionName = "";
    private string _newDirectionDescription = "";
    private string _newProjectName = "";
    private string _newProjectDescription = "";
    private string? _errorMessage;
    private List<Guid> _selectedDirectionInternIds = new();
    private List<Guid> _selectedProjectInternIds = new();
    private int _currentPage = 1;
    private int _pageSize = 5;

    private List<DirectionDto?> _allDirections = new();
    private List<ProjectDto?> _allProjects = new();
    private List<InternDto> _allInterns = new();

    private List<DirectionViewModel> _directionViewModels = new();
    private List<ProjectViewModel> _projectViewModels = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        string[] directionParams = _sortBy == "name" ? new[] { "orderByName" } : new[] { "orderByCount" };
        string[] projectParams = _sortBy == "name" ? new[] { "orderByName" } : new[] { "orderByCount" };

        var directionsTask = DirectionService.GetDirectionsAsync(directionParams);
        var projectsTask = ProjectService.GetProjectsAsync(projectParams);
        var internsTask = InternService.GetInternsAsync();

        await Task.WhenAll(directionsTask, projectsTask, internsTask);

        _allDirections = (await directionsTask)!;
        _allProjects = await projectsTask;
        _allInterns = await internsTask;

        var comparer = StringComparer.Create(new System.Globalization.CultureInfo("ru-RU"), true);

        _directionViewModels = _allDirections
            .Select(d => new DirectionViewModel
            {
                Direction = d!,
                InternCount = _allInterns.Count(i => i.DirectionId == d?.Id),
                Interns = _allInterns.Where(i => i.DirectionId == d?.Id).ToList(),
                ShowInterns = false
            })
            .OrderBy(dvm => _sortBy == "count" ? -dvm.InternCount : 0) 
            .ThenBy(dvm => dvm.Direction.Name, comparer)
            .ToList();

        if (_sortBy == "count")
        {
            _directionViewModels = _directionViewModels
                .OrderByDescending(d => d.InternCount)
                .ThenBy(d => d.Direction.Name, comparer)
                .ToList();
        }
        else
        {
            _directionViewModels = _directionViewModels
                .OrderBy(d => d.Direction.Name, comparer)
                .ToList();
        }

        _projectViewModels = _allProjects
            .Select(p => new ProjectViewModel
            {
                Project = p,
                InternCount = _allInterns.Count(i => i.ProjectId == p?.Id),
                Interns = _allInterns.Where(i => i.ProjectId == p?.Id).ToList(),
                ShowInterns = false
            })
            .ToList();

        if (_sortBy == "count")
        {
            _projectViewModels = _projectViewModels
                .OrderByDescending(p => p.InternCount)
                .ThenBy(p => p.Project?.Name, comparer)
                .ToList();
        }
        else
        {
            _projectViewModels = _projectViewModels
                .OrderBy(p => p.Project?.Name, comparer)
                .ToList();
        }

        _currentPage = 1;
        StateHasChanged();
    }

    private void SwitchTabDepartments()
    {
        _activeTab = "directions";
        _currentPage = 1;
    }

    private void SwitchTabProjects()
    {
        _activeTab = "projects";
        _currentPage = 1;
    }

    private static void ToggleInterns(DirectionViewModel direction) => direction.ShowInterns = !direction.ShowInterns;
    private static void ToggleInterns(ProjectViewModel project) => project.ShowInterns = !project.ShowInterns;

    private async Task AddDirection()
    {
        if (string.IsNullOrWhiteSpace(_newDirectionName)) return;

        var request = new AddDirectionRequest
        {
            Name = _newDirectionName,
            Description = _newDirectionDescription,
            InternIds = _selectedDirectionInternIds
        };

        await DirectionService.AddDirectionAsync(request);
        _newDirectionName = "";
        _newDirectionDescription = "";
        _selectedDirectionInternIds.Clear();
        await LoadData();
    }

    private async Task AddProject()
    {
        if (string.IsNullOrWhiteSpace(_newProjectName)) return;

        var request = new AddProjectRequest
        {
            Name = _newProjectName,
            Description = _newProjectDescription,
            InternIds = _selectedProjectInternIds
        };

        await ProjectService.AddProjectAsync(request);
        _newProjectName = "";
        _newProjectDescription = "";
        _selectedProjectInternIds.Clear();
        await LoadData();
    }

    private async Task DeleteDirection(DirectionViewModel direction)
    {
        _errorMessage = null;
        try
        {
            var deletedId = await DirectionService.DeleteDirectionAsync(direction.Direction.Id);
            if (deletedId == Guid.Empty)
            {
                _errorMessage = "Нельзя удалить проект с прикрепленными стажёрами.";
            }
            else
            {
                _directionViewModels.Remove(direction);
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Ошибка при удалении проекта: {ex.Message}";
        }
    }

    private async Task DeleteProject(ProjectViewModel project)
    {
        _errorMessage = null;
        try
        {
            var deletedId = await ProjectService.DeleteProjectAsync(project.Project!.Id);
            Console.WriteLine(deletedId);
            if (deletedId == Guid.Empty)
            {
                _errorMessage = "Нельзя удалить проект с прикрепленными стажёрами.";
            }
            else
            {
                _projectViewModels.Remove(project);
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Ошибка при удалении проекта: {ex.Message}";
        }
    }


    private void OnDirectionInternsChanged(ChangeEventArgs e)
    {
        var selectedValues = (e.Value as IEnumerable<string>)?.ToList() ?? new List<string>();
        _selectedDirectionInternIds = selectedValues.Select(Guid.Parse).ToList();
    }

    private void OnProjectInternsChanged(ChangeEventArgs e)
    {
        var selectedValues = (e.Value as IEnumerable<string>)?.ToList() ?? new List<string>();
        _selectedProjectInternIds = selectedValues.Select(Guid.Parse).ToList();
    }

    private void EditDirection(DirectionViewModel direction)
        => NavigationManager.NavigateTo($"/edit-direction/{direction.Direction.Id}");

    private void EditProject(ProjectViewModel project)
        => NavigationManager.NavigateTo($"/edit-project/{project.Project!.Id}");

    private void SortChanged(ChangeEventArgs e)
    {
        _sortBy = e.Value?.ToString() ?? "name";
        _ = LoadData();
    }

    private IEnumerable<DirectionViewModel> FilteredDirections
    {
        get
        {
            var list = _directionViewModels.AsEnumerable();
            if (!string.IsNullOrEmpty(_searchTerm))
                list = list.Where(d => d.Direction.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)
                                      || (d.Direction.Description).Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));
            return list.Skip((_currentPage - 1) * _pageSize).Take(_pageSize);
        }
    }

    private IEnumerable<ProjectViewModel> FilteredProjects
    {
        get
        {
            var list = _projectViewModels.AsEnumerable();
            if (!string.IsNullOrEmpty(_searchTerm))
                list = list.Where(p => p.Project!.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)
                                     || (p.Project.Description).Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));
            return list.Skip((_currentPage - 1) * _pageSize).Take(_pageSize);
        }
    }

    private bool HasNextPage
        => _activeTab == "directions"
            ? _directionViewModels.Count > _currentPage * _pageSize
            : _projectViewModels.Count > _currentPage * _pageSize;

    private void PrevPage() => _currentPage = Math.Max(1, _currentPage - 1);
    private void NextPage() { if (HasNextPage) _currentPage++; }

    public void Dispose() { }

    private class DirectionViewModel
    {
        public DirectionDto Direction { get; init; } = new();
        public int InternCount { get; init; }
        public List<InternDto> Interns { get; init; } = new();
        public bool ShowInterns { get; set; }
    }

    private class ProjectViewModel
    {
        public ProjectDto? Project { get; init; } = new();
        public int InternCount { get; init; }
        public List<InternDto> Interns { get; init; } = new();
        public bool ShowInterns { get; set; }
    }
}