@page "/interns"
@using InternshipRecords.Client.Services.Intern
@using InternshipRecords.Client.Services
@using Shared.Models.Intern
@using Shared.Models.Direction
@using Shared.Models.Project
@inject InternService InternService
@inject DirectionService DirectionService
@inject ProjectService ProjectService
@inject InternSignalRService InternSignalRService
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="page-center">
    <div class="intern-card p-3">
        <h3>Список стажеров</h3>

        @if (!string.IsNullOrEmpty(_serverErrorMessage))
        {
            <div class="alert alert-danger">@_serverErrorMessage</div>
        }

        <div class="filter-section mb-3" style="display:flex;gap:8px;flex-wrap:wrap">
            <input type="text" class="form-control" style="min-width:220px" placeholder="Поиск по имени или email" @oninput="OnSearchChanged" />

            <select class="form-control" style="min-width:220px" @onchange="OnDirectionFilterChanged">
                <option value="">Все направления</option>
                @foreach (var d in _directions ?? Enumerable.Empty<DirectionDto>())
                {
                    <option value="@d.Id">@d.Name</option>
                }
            </select>

            <select class="form-control" style="min-width:220px" @onchange="OnProjectFilterChanged">
                <option value="">Все проекты</option>
                @foreach (var p in _projects ?? Enumerable.Empty<ProjectDto?>())
                {
                    <option value="@p?.Id">@p?.Name</option>
                }
            </select>

            <button class="btn btn-primary" @onclick="NavigateToAdd">Добавить стажера</button>
        </div>

        <div class="interns-list" style="display:flex;flex-direction:column;gap:12px">
            @foreach (var intern in FilteredInternsPaged)
            {
                <div class="intern-card" style="border:1px solid #e6e6e6;border-radius:8px;padding:12px;position:relative;">
                    <div style="display:flex;justify-content:space-between;align-items:flex-start;gap:8px">
                        <div>
                            <div style="font-weight:600;font-size:1.05rem">@intern.FirstName @intern.LastName</div>
                            <div style="color:#6c757d;font-size:.9rem;margin-top:6px">
                                <div>
                                    @( (_directions ?? Enumerable.Empty<DirectionDto>()).FirstOrDefault(d => d.Id == intern.DirectionId)?.Name ?? (intern.DirectionId?.ToString() ?? "-") )
                                    •
                                    @( (_projects ?? Enumerable.Empty<ProjectDto?>()).FirstOrDefault(p => p?.Id == intern.ProjectId)?.Name ?? "-" )
                                </div>
                                <div>@intern.Email</div>
                                <div>@(intern.Phone ?? "-")</div>
                            </div>
                        </div>
                        <div style="display:flex;flex-direction:column;gap:6px">
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => EditIntern(intern.Id)">Редактировать</button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteIntern(intern.Id)">Удалить</button>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (!_filteredInterns.Any())
        {
            <p class="mt-3">Стажеры не найдены.</p>
        }

        <div class="pagination mt-3">
            <button class="btn btn-outline" @onclick="PrevPage" disabled="@(_currentPage <= 1)">Назад</button>
            <span>Страница @_currentPage</span>
            <button class="btn btn-outline" @onclick="NextPage" disabled="@(!HasNextPage)">Вперед</button>
            <select @bind="_pageSize" class="form-control page-size" style="width:120px; display:inline-block; margin-left:8px;">
                <option value="5">5 на странице</option>
                <option value="10">10 на странице</option>
                <option value="20">20 на странице</option>
            </select>
        </div>
    </div>
</div>

@code {
    private List<InternDto> _interns = new();
    private List<InternDto> _filteredInterns = new();

    private List<DirectionDto> _directions = new();
    private List<ProjectDto>  _projects = new();

    private Guid? _filterDirectionId;
    private Guid? _filterProjectId;
    private string _searchText = "";
    private int _currentPage = 1;
    private int _pageSize = 5;
    private string? _serverErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadLookups();
        await LoadInterns();
        await SetupSignalR();
    }

    private async Task LoadLookups()
    {
        try
        {
            var dirs = await DirectionService.GetDirectionsAsync();
            _directions = dirs;

            var projects = await ProjectService.GetProjectsAsync();
            _projects = projects;
        }
        catch(Exception ex)
        {
            _serverErrorMessage = ex.Message;
        }
    }

    private async Task LoadInterns()
    {
        _serverErrorMessage = null;
        try
        {
            _interns = await InternService.GetInternsAsync();
            ApplyFilter();
        }
        catch (InvalidOperationException ex)
        {
            _serverErrorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            _serverErrorMessage = $"Произошла ошибка загрузки стажёров: {ex.Message}";
        }
    }

    private async Task SetupSignalR()
    {
        InternSignalRService.InternCreated += HandleInternCreated;
        InternSignalRService.InternUpdated += HandleInternUpdated;
        InternSignalRService.InternDeleted += HandleInternDeleted;
        await InternSignalRService.StartAsync();
    }

    private void HandleInternCreated(InternDto intern)
    {
        InvokeAsync(() =>
        {
            _interns.Add(intern);
            ApplyFilter();
            StateHasChanged();
        });
    }

    private void HandleInternUpdated(InternDto intern)
    {
        InvokeAsync(() =>
        {
            var idx = _interns.FindIndex(i => i.Id == intern.Id);
            if (idx >= 0) _interns[idx] = intern;
            else _interns.Add(intern);
            ApplyFilter();
            StateHasChanged();
        });
    }

    private void HandleInternDeleted(Guid id)
    {
        InvokeAsync(() =>
        {
            var item = _interns.FirstOrDefault(i => i.Id == id);
            if (item != null) _interns.Remove(item);
            ApplyFilter();
            StateHasChanged();
        });
    }

    private void ApplyFilter()
    {
        _filteredInterns = _interns.Where(i =>
            (!_filterDirectionId.HasValue || i.DirectionId == _filterDirectionId) &&
            (!_filterProjectId.HasValue || i.ProjectId == _filterProjectId) &&
            (string.IsNullOrWhiteSpace(_searchText) ||
             i.FirstName.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ||
             i.LastName.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ||
             i.Email.Contains(_searchText, StringComparison.OrdinalIgnoreCase))
        ).ToList();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        _searchText = e.Value?.ToString() ?? "";
        _currentPage = 1;
        ApplyFilter();
    }

    private void OnDirectionFilterChanged(ChangeEventArgs e)
    {
        var v = e.Value?.ToString();
        _filterDirectionId = Guid.TryParse(v, out var id) ? id : null;
        _currentPage = 1;
        ApplyFilter();
    }

    private void OnProjectFilterChanged(ChangeEventArgs e)
    {
        var v = e.Value?.ToString();
        _filterProjectId = Guid.TryParse(v, out var id) ? id : null;
        _currentPage = 1;
        ApplyFilter();
    }

    private async Task DeleteIntern(Guid id)
    {
        _serverErrorMessage = null;
        try
        {
            await InternService.DeleteInternAsync(id);
            await LoadInterns();
        }
        catch (InvalidOperationException ex)
        {
            _serverErrorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            _serverErrorMessage = $"Произошла ошибка при удалении: {ex.Message}";
        }
    }

    private void EditIntern(Guid id) => NavigationManager.NavigateTo($"/edit-intern/{id}");
    private void NavigateToAdd() => NavigationManager.NavigateTo("/add-intern");

    private IEnumerable<InternDto> FilteredInternsPaged
        => _filteredInterns.Skip((_currentPage - 1) * _pageSize).Take(_pageSize);

    private bool HasNextPage => _filteredInterns.Count > _currentPage * _pageSize;

    private void PrevPage() => _currentPage = Math.Max(1, _currentPage - 1);

    private void NextPage()
    {
        if (HasNextPage) _currentPage++;
    }

    public void Dispose()
    {
        InternSignalRService.InternCreated -= HandleInternCreated;
        InternSignalRService.InternUpdated -= HandleInternUpdated;
        InternSignalRService.InternDeleted -= HandleInternDeleted;
    }
}
