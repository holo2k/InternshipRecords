@page "/add-intern"
@using System.Text.Json
@using System.Text.Json.Nodes
@using InternshipRecords.Client.Services
@using InternshipRecords.Client.Services.Intern
@using Shared.Models.Project
@using Shared.Models.Intern
@using Shared.Models.Direction
@inject InternService InternService
@inject DirectionService DirectionService
@inject ProjectService ProjectService
@inject NavigationManager NavigationManager

<div class="page-center">
    <div class="edit-card">
        <h3 class="mb-3">Добавление нового стажера</h3>

        @if (!string.IsNullOrWhiteSpace(_serverErrorMessage))
        {
            <div class="alert alert-danger">
                <div><strong>@_serverErrorMessage</strong></div>
                @if (_serverFieldErrors?.Any() == true)
                {
                    <ul class="mt-2 mb-0">
                        @foreach (var kv in _serverFieldErrors)
                        {
                            <li>
                                <strong>@kv.Key:</strong>
                                <ul>
                                    @foreach (var m in kv.Value)
                                    {
                                        <li>@m</li>
                                    }
                                </ul>
                            </li>
                        }
                    </ul>
                }
            </div>
        }

        <EditForm Model="_internRequest" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-grid">
                <div>
                    <label>Имя</label>
                    <InputText @bind-Value="_internRequest.FirstName" class="form-control" />
                </div>

                <div>
                    <label>Фамилия</label>
                    <InputText @bind-Value="_internRequest.LastName" class="form-control" />
                </div>

                <div>
                    <label>Пол</label>
                    <InputSelect @bind-Value="_internRequest.Gender" class="form-control">
                        <option disabled value="">-- выберите --</option>
                        <option value="Male">Мужской</option>
                        <option value="Female">Женский</option>
                    </InputSelect>
                </div>

                <div>
                    <label>Email</label>
                    <InputText @bind-Value="_internRequest.Email" class="form-control" />
                </div>

                <div>
                    <label>Телефон</label>
                    <InputText @bind-Value="_internRequest.Phone" class="form-control" placeholder="+7..." />
                </div>

                <div>
                    <label>Дата рождения</label>
                    <InputDate @bind-Value="_internRequest.BirthDate" class="form-control" />
                </div>

                <div>
                    <label>Направление стажировки</label>
                    <InputSelect @bind-Value="SelectedDirectionSelection" class="form-control">
                        <option disabled value="">Выберите направление</option>
                        <option value="__new__">+ Новое направление</option>
                        @foreach (var d in _directions.Result)
                        {
                            <option value="@d.Id.ToString()">@d.Name</option>
                        }
                    </InputSelect>

                    @if (_showNewDirectionInput)
                    {
                        <div class="mt-2">
                            <InputText placeholder="Название" @bind-Value="_newDirectionName" class="form-control mb-1" />
                            <InputText placeholder="Описание" @bind-Value="_newDirectionDescription" class="form-control" />
                        </div>
                    }
                </div>

                <div>
                    <label>Текущий проект</label>
                    <InputSelect @bind-Value="SelectedProjectSelection" class="form-control">
                        <option disabled value="">Выберите проект</option>
                        <option value="__new__">+ Новый проект</option>
                        @foreach (var p in _projects.Result)
                        {
                            <option value="@p.Id.ToString()">@p.Name</option>
                        }
                    </InputSelect>

                    @if (_showNewProjectInput)
                    {
                        <div class="mt-2">
                            <InputText placeholder="Название" @bind-Value="_newProjectName" class="form-control mb-1" />
                            <InputText placeholder="Описание" @bind-Value="_newProjectDescription" class="form-control" />
                        </div>
                    }
                </div>
            </div>

            <div class="form-actions mt-3">
                <button type="submit" class="btn btn-primary">Сохранить</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Отмена</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    // модель запроса
    private readonly AddInternRequest _internRequest = new();

    // сервисы теперь возвращают (Result, Error?) tuples
    private (List<DirectionDto> Result, string? Error) _directions = (new List<DirectionDto>(), null);
    private (List<ProjectDto> Result, string? Error) _projects = (new List<ProjectDto>(), null);

    // временные для создания новых direction/project
    private string _newDirectionName = "";
    private string _newProjectName = "";
    private string _newDirectionDescription = "";
    private string _newProjectDescription = "";

    // выбор в селектах
    private string _selectedDirectionSelection = "";
    private string _selectedProjectSelection = "";
    private bool _showNewDirectionInput;
    private bool _showNewProjectInput;

    // серверная ошибка и field-errors
    private string? _serverErrorMessage;
    private Dictionary<string, string[]>? _serverFieldErrors;

    private string SelectedDirectionSelection
    {
        get => _selectedDirectionSelection;
        set
        {
            _selectedDirectionSelection = value;
            HandleDirectionSelection(value);
        }
    }

    private string SelectedProjectSelection
    {
        get => _selectedProjectSelection;
        set
        {
            _selectedProjectSelection = value;
            HandleProjectSelection(value);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // загружаем справочники; сервисы возвращают (result, error)
        try
        {
            _directions = await DirectionService.GetDirectionsAsync();
        }
        catch (Exception ex)
        {
            // в случае исключения — безопасно показываем сообщение
            _directions = (new List<DirectionDto>(), $"Ошибка загрузки направлений: {ex.Message}");
        }

        try
        {
            _projects = await ProjectService.GetProjectsAsync();
        }
        catch (Exception ex)
        {
            _projects = (new List<ProjectDto>(), $"Ошибка загрузки проектов: {ex.Message}");
        }

        // если есть какие-то ошибки при загрузке — покажем их
        if (!string.IsNullOrEmpty(_directions.Error))
            _serverErrorMessage = _directions.Error;
        else if (!string.IsNullOrEmpty(_projects.Error))
            _serverErrorMessage = _projects.Error;

        _internRequest.BirthDate = DateOnly.FromDateTime(DateTime.Today.AddYears(-18));
    }

    private void HandleDirectionSelection(string val)
    {
        if (val == "__new__")
        {
            _showNewDirectionInput = true;
            _internRequest.DirectionId = null;
        }
        else if (Guid.TryParse(val, out var id))
        {
            _showNewDirectionInput = false;
            _internRequest.DirectionId = id;
        }
        else
        {
            _showNewDirectionInput = false;
            _internRequest.DirectionId = null;
        }
    }

    private void HandleProjectSelection(string val)
    {
        if (val == "__new__")
        {
            _showNewProjectInput = true;
            _internRequest.ProjectId = null;
        }
        else if (Guid.TryParse(val, out var id))
        {
            _showNewProjectInput = false;
            _internRequest.ProjectId = id;
        }
        else
        {
            _showNewProjectInput = false;
            _internRequest.ProjectId = null;
        }
    }

    private async Task<DirectionDto?> GetOrCreateDirectionAsync(string name)
    {
        // пробуем найти в локальном списке
        var found = _directions.Result.FirstOrDefault(d => string.Equals(d.Name, name, StringComparison.OrdinalIgnoreCase));
        if (found != null) return found;

        // создаём через сервис
        var (created, error) = await DirectionService.AddDirectionAsync(new AddDirectionRequest { Name = name, Description = _newDirectionDescription });
        if (!string.IsNullOrEmpty(error))
        {
            // пробрасываем ошибку наружу через поле
            _serverErrorMessage = $"Ошибка при создании направления: {error}";
            return null;
        }

        if (created is null)
        {
            _serverErrorMessage = "Не удалось создать направление.";
            return null;
        }

        // обновим локальный кэш
        _directions.Result.Add(created);
        return created;
    }

    private async Task<ProjectDto?> GetOrCreateProjectAsync(string name)
    {
        var found = _projects.Result.FirstOrDefault(p => string.Equals(p.Name, name, StringComparison.OrdinalIgnoreCase));
        if (found != null) return found;

        var (created, error) = await ProjectService.AddProjectAsync(new AddProjectRequest { Name = name, Description = _newProjectDescription });
        if (!string.IsNullOrEmpty(error))
        {
            _serverErrorMessage = $"Ошибка при создании проекта: {error}";
            return null;
        }

        if (created is null)
        {
            _serverErrorMessage = "Не удалось создать проект.";
            return null;
        }

        _projects.Result.Add(created);
        return created;
    }

    private async Task HandleValidSubmit()
    {
        // сброс предыдущих ошибок
        _serverErrorMessage = null;
        _serverFieldErrors = null;

        try
        {
            // создать/получить новое направление при необходимости
            if (_showNewDirectionInput && !string.IsNullOrWhiteSpace(_newDirectionName))
            {
                var dir = await GetOrCreateDirectionAsync(_newDirectionName.Trim());
                if (dir == null) return; // ошибка уже установлена
                _internRequest.DirectionId = dir.Id;
                _selectedDirectionSelection = dir.Id.ToString();
                _newDirectionName = "";
                _newDirectionDescription = "";
            }

            // создать/получить новый проект при необходимости
            if (_showNewProjectInput && !string.IsNullOrWhiteSpace(_newProjectName))
            {
                var proj = await GetOrCreateProjectAsync(_newProjectName.Trim());
                if (proj == null) return;
                _internRequest.ProjectId = proj.Id;
                _selectedProjectSelection = proj.Id.ToString();
                _newProjectName = "";
                _newProjectDescription = "";
            }

            // теперь собственно добавить стажёра
            try
            {
                await InternService.AddInternAsync(_internRequest);
                NavigationManager.NavigateTo("/interns");
            }
            catch (InvalidOperationException invEx)
            {
                // internService выбрасывает InvalidOperationException(serverMessage)
                // попытаемся разобрать JSON и показать понятные ошибки
                ProcessServerError(invEx.Message);
            }
            catch (Exception ex)
            {
                _serverErrorMessage = $"Произошла ошибка при сохранении: {ex.Message}";
            }
        }
        catch (Exception ex)
        {
            // общий catch для unexpected
            _serverErrorMessage = $"Неожиданная ошибка: {ex.Message}";
        }
    }

    private void ProcessServerError(string serverMessage)
    {
        if (string.IsNullOrWhiteSpace(serverMessage))
        {
            _serverErrorMessage = "Ошибка сервера (пустой ответ).";
            return;
        }

        // пытаемся распарсить JSON вида { message: "...", errors: { "Field": ["err1","err2"] } }
        try
        {
            using var doc = JsonDocument.Parse(serverMessage);
            var root = doc.RootElement;

            if (root.TryGetProperty("message", out var msgEl))
            {
                _serverErrorMessage = msgEl.GetString();
            }
            else
            {
                // если нет "message" — положим весь текст
                _serverErrorMessage = serverMessage;
            }

            if (root.TryGetProperty("errors", out var errorsEl) && errorsEl.ValueKind == JsonValueKind.Object)
            {
                var dict = new Dictionary<string, string[]>();
                foreach (var prop in errorsEl.EnumerateObject())
                {
                    if (prop.Value.ValueKind == JsonValueKind.Array)
                    {
                        var list = prop.Value.EnumerateArray().Select(x => x.GetString() ?? "").Where(s => !string.IsNullOrEmpty(s)).ToArray();
                        dict[prop.Name] = list;
                    }
                    else if (prop.Value.ValueKind == JsonValueKind.String)
                    {
                        dict[prop.Name] = new[] { prop.Value.GetString() ?? "" };
                    }
                    else
                    {
                        dict[prop.Name] = new[] { prop.Value.ToString() ?? "" };
                    }
                }

                if (dict.Any())
                    _serverFieldErrors = dict;
            }
        }
        catch
        {
            // если не JSON — просто показываем строку
            _serverErrorMessage = serverMessage;
        }
    }

    private void Cancel() => NavigationManager.NavigateTo("/interns");
}
