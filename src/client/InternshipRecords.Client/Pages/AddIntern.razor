@page "/add-intern"
@using InternshipRecords.Client.Services
@using InternshipRecords.Client.Services.Intern
@using Shared.Models
@using Shared.Models.Project
@using Shared.Models.Intern
@using Shared.Models.Direction
@inject InternService InternService
@inject DirectionService DirectionService
@inject ProjectService ProjectService
@inject NavigationManager NavigationManager

<div class="card">
    <h3>Добавление нового стажера</h3>

    <EditForm Model="internRequest" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Имя:</label>
            <InputText @bind-Value="internRequest.FirstName" class="form-control" />
        </div>

        <div class="form-group">
            <label>Фамилия:</label>
            <InputText @bind-Value="internRequest.LastName" class="form-control" />
        </div>

        <div class="form-group">
            <label>Пол:</label>
            <InputSelect @bind-Value="internRequest.Gender" class="form-control">
                <option value="">Выберите пол</option>
                <option value="Male">Мужской</option>
                <option value="Female">Женский</option>
            </InputSelect>
        </div>

        <div class="form-group">
            <label>Email:</label>
            <InputText @bind-Value="internRequest.Email" class="form-control" />
        </div>

        <div class="form-group">
            <label>Телефон:</label>
            <InputText @bind-Value="internRequest.Phone" class="form-control" placeholder="+7..." />
        </div>

        <div class="form-group">
            <label>Дата рождения:</label>
            <InputDate @bind-Value="internRequest.BirthDate" class="form-control" />
        </div>

        <div class="form-group">
            <label>Направление стажировки:</label>
            <InputSelect @bind-Value="internRequest.DirectionId" class="form-control">
                <option value="">Выберите направление</option>
                @foreach (var d in _directions)
                {
                    <option value="@d.Id">@d.Name</option>
                }
            </InputSelect>
            <div class="add-item">
                <InputText placeholder="Новое направление" @bind-Value="_newDirectionName" class="form-control" />
                <button type="button" class="btn" @onclick="AddDirection">Добавить</button>
            </div>
        </div>

        <div class="form-group">
            <label>Текущий проект:</label>
            <InputSelect @bind-Value="internRequest.ProjectId" class="form-control">
                <option value="">Выберите проект</option>
                @foreach (var p in _projects)
                {
                    <option value="@p.Id">@p.Name</option>
                }
            </InputSelect>
            <div class="add-item">
                <InputText placeholder="Новый проект" @bind-Value="_newProjectName" class="form-control" />
                <button type="button" class="btn" @onclick="AddProject">Добавить</button>
            </div>
        </div>

        <button type="submit" class="btn btn-primary">Сохранить</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Отмена</button>
    </EditForm>
</div>

@code {
    private readonly AddInternRequest internRequest = new AddInternRequest();
    private List<DirectionDto> _directions = new();
    private List<ProjectDto> _projects = new();
    private string _newDirectionName = "";
    private string _newProjectName = "";

    protected override async Task OnInitializedAsync()
    {
        _directions = await DirectionService.GetDirectionsAsync();
        _projects = await ProjectService.GetProjectsAsync();
    }

    private async Task AddDirection()
    {
        if (!string.IsNullOrWhiteSpace(_newDirectionName))
        {
            var newDirection = await DirectionService.AddDirectionAsync(new AddDirectionRequest { Name = _newDirectionName });
            _directions.Add(newDirection);
            internRequest.DirectionId = newDirection.Id;
            _newDirectionName = "";
        }
    }

    private async Task AddProject()
    {
        if (!string.IsNullOrWhiteSpace(_newProjectName))
        {
            var newProject = await ProjectService.AddProjectAsync(new AddProjectRequest { Name = _newProjectName });
            _projects.Add(newProject);
            internRequest.ProjectId = newProject.Id;
            _newProjectName = "";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await InternService.AddInternAsync(internRequest);
            NavigationManager.NavigateTo("/interns");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при добавлении стажера: {ex.Message}");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/interns");
    }
}