@page "/add-intern"
@using InternshipRecords.Client.Services
@inject InternService InternService
@inject DepartmentService DepartmentService
@inject ProjectService ProjectService

<div class="card">
    <h3>Добавление нового стажера</h3>

    <EditForm Model="intern" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Имя:</label>
            <InputText @bind-Value="intern.FirstName" class="form-control" />
        </div>

        <div class="form-group">
            <label>Фамилия:</label>
            <InputText @bind-Value="intern.LastName" class="form-control" />
        </div>

        <div class="form-group">
            <label>Пол:</label>
            <InputSelect @bind-Value="intern.Gender" class="form-control">
                <option value="">Выберите пол</option>
                <option value="Male">Мужской</option>
                <option value="Female">Женский</option>
            </InputSelect>
        </div>

        <div class="form-group">
            <label>Email:</label>
            <InputText @bind-Value="intern.Email" class="form-control" />
        </div>

        <div class="form-group">
            <label>Телефон:</label>
            <InputText @bind-Value="intern.Phone" class="form-control" placeholder="+7..." />
        </div>

        <div class="form-group">
            <label>Дата рождения:</label>
            <InputDate @bind-Value="intern.BirthDate" class="form-control" />
        </div>

        <div class="form-group">
            <label>Направление стажировки:</label>
            <InputSelect @bind-Value="intern.Department" class="form-control">
                <option value="">Выберите направление</option>
                @foreach (var d in departments)
                {
                    <option value="@d">@d</option>
                }
            </InputSelect>
            <div class="add-item">
                <InputText placeholder="Добавить новое" @bind-Value="newDepartment" class="form-control" />
                <button type="button" class="btn" @onclick="AddDepartment">Добавить</button>
            </div>
        </div>

        <div class="form-group">
            <label>Текущий проект:</label>
            <InputSelect @bind-Value="intern.Project" class="form-control">
                <option value="">Выберите проект</option>
                @foreach (var p in projects)
                {
                    <option value="@p">@p</option>
                }
            </InputSelect>
            <div class="add-item">
                <InputText placeholder="Добавить новый" @bind-Value="newProject" class="form-control" />
                <button type="button" class="btn" @onclick="AddProject">Добавить</button>
            </div>
        </div>

        <button type="submit" class="btn">Сохранить</button>
    </EditForm>
</div>

@code {
    private InternDto intern = new();
    private List<string> departments = new();
    private List<string> projects = new();
    private string newDepartment = "";
    private string newProject = "";

    protected override async Task OnInitializedAsync()
    {
        // Заглушки, если сервер недоступен
        departments = await DepartmentService.GetDepartmentsAsync() ?? new List<string> { "Frontend", "Backend" };
        projects = await ProjectService.GetProjectsAsync() ?? new List<string> { "Project A", "Project B" };
    }

    private async Task AddDepartment()
    {
        if (!string.IsNullOrWhiteSpace(newDepartment))
        {
            await DepartmentService.AddDepartmentAsync(newDepartment);
            departments = await DepartmentService.GetDepartmentsAsync() ?? departments;
            intern.Department = newDepartment;
            newDepartment = "";
        }
    }

    private async Task AddProject()
    {
        if (!string.IsNullOrWhiteSpace(newProject))
        {
            await ProjectService.AddProjectAsync(newProject);
            projects = await ProjectService.GetProjectsAsync() ?? projects;
            intern.Project = newProject;
            newProject = "";
        }
    }

    private async Task HandleValidSubmit()
    {
        await InternService.AddInternAsync(intern);
        intern = new InternDto(); // очистка формы
    }
}
