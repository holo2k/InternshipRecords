@page "/departments-projects"
@using InternshipRecords.Client.Services
@inject DepartmentService DepartmentService
@inject ProjectService ProjectService
@inject InternService InternService

<div class="card">
    <h3>Направления и проекты</h3>

    <div class="tabs">
        <button class="tab-button @(activeTab == "departments" ? "active" : "")" @onclick="() => SwitchTabDepartments()">
            Направления
        </button>
        <button class="tab-button @(activeTab == "projects" ? "active" : "")" @onclick="() => SwitchTabProjects()">
            Проекты
        </button>
    </div>

    <div class="search-sort">
        <input placeholder="Поиск" @bind="searchTerm" class="form-control" />
        <select @bind="sortBy" class="form-control">
            <option value="name">Сортировать по названию</option>
            <option value="count">Сортировать по количеству стажеров</option>
        </select>
    </div>

    <div class="tab-content">
        @if (activeTab == "departments")
        {
            <ul>
                @foreach (var item in GetPagedDepartments())
                {
                    <li class="list-item">
                        <strong>@item.Name</strong> (@item.InternCount)
                        <button class="btn btn-sm" @onclick="() => ToggleInterns(item)">Стажеры</button>
                        <button class="btn btn-sm" @onclick="() => EditDepartment(item)">Редактировать</button>
                        <button class="btn btn-sm" @onclick="() => DeleteDepartment(item)">Удалить</button>

                        @if (item.ShowInterns)
                        {
                            <ul class="interns-sublist">
                                @foreach (var intern in item.Interns)
                                {
                                    <li>@intern.FirstName @intern.LastName</li>
                                }
                            </ul>
                        }
                    </li>
                }
            </ul>
        }
        else if (activeTab == "projects")
        {
            <ul>
                @foreach (var item in GetPagedProjects())
                {
                    <li class="list-item">
                        <strong>@item.Name</strong> (@item.InternCount)
                        <button class="btn btn-sm" @onclick="() => ToggleInterns(item)">Стажеры</button>
                        <button class="btn btn-sm" @onclick="() => EditProject(item)">Редактировать</button>
                        <button class="btn btn-sm" @onclick="() => DeleteProject(item)">Удалить</button>

                        @if (item.ShowInterns)
                        {
                            <ul class="interns-sublist">
                                @foreach (var intern in item.Interns)
                                {
                                    <li>@intern.FirstName @intern.LastName</li>
                                }
                            </ul>
                        }
                    </li>
                }
            </ul>
        }
    </div>

    <div class="pagination">
        <button @onclick="PrevPage">Назад</button>
        <span>Страница @currentPage</span>
        <button @onclick="NextPage">Вперед</button>
        <input type="number" min="1" @bind="pageSize" placeholder="Размер страницы" class="form-control" />
    </div>
</div>

@code {
    private string activeTab = "departments";
    private string searchTerm = "";
    private string sortBy = "name";

    private int currentPage = 1;
    private int pageSize = 5;

    private List<DepartmentDto> departments = new();
    private List<ProjectDto> projects = new();

    protected override async Task OnInitializedAsync()
    {
        departments = new List<DepartmentDto>
        {
            new() { Name="Backend", InternCount=3, Interns = GetDummyInterns(3) },
            new() { Name="Frontend", InternCount=2, Interns = GetDummyInterns(2) },
        };

        projects = new List<ProjectDto>
        {
            new() { Name="Project A", InternCount=2, Interns = GetDummyInterns(2) },
            new() { Name="Project B", InternCount=3, Interns = GetDummyInterns(3) },
        };
    }

    private void SwitchTabDepartments()
    {
        activeTab = "departments";
        currentPage = 1;
    }

    private void SwitchTabProjects()
    {
        activeTab = "projects";
        currentPage = 1;
    }

    private void ToggleInterns(dynamic item)
    {
        item.ShowInterns = !item.ShowInterns;
    }

    private void EditDepartment(DepartmentDto d) { /* заглушка */ }
    private void DeleteDepartment(DepartmentDto d) { /* заглушка */ }
    private void EditProject(ProjectDto p) { /* заглушка */ }
    private void DeleteProject(ProjectDto p) { /* заглушка */ }

    private IEnumerable<DepartmentDto> GetPagedDepartments()
    {
        var list = departments
            .Where(d => string.IsNullOrEmpty(searchTerm) || d.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

        list = sortBy == "count" ? list.OrderByDescending(d => d.InternCount) : list.OrderBy(d => d.Name);

        return list.Skip((currentPage - 1) * pageSize).Take(pageSize);
    }

    private IEnumerable<ProjectDto> GetPagedProjects()
    {
        var list = projects
            .Where(p => string.IsNullOrEmpty(searchTerm) || p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

        list = sortBy == "count" ? list.OrderByDescending(p => p.InternCount) : list.OrderBy(p => p.Name);

        return list.Skip((currentPage - 1) * pageSize).Take(pageSize);
    }

    private void PrevPage() => currentPage = Math.Max(1, currentPage - 1);
    private void NextPage() => currentPage++;

    private List<InternDto> GetDummyInterns(int count)
    {
        var list = new List<InternDto>();
        for (int i = 1; i <= count; i++)
        {
            list.Add(new InternDto { FirstName = $"Имя{i}", LastName = $"Фамилия{i}" });
        }
        return list;
    }

    private class DepartmentDto
    {
        public string Name { get; set; } = "";
        public int InternCount { get; set; }
        public List<InternDto> Interns { get; set; } = new();
        public bool ShowInterns { get; set; }
    }

    private class ProjectDto
    {
        public string Name { get; set; } = "";
        public int InternCount { get; set; }
        public List<InternDto> Interns { get; set; } = new();
        public bool ShowInterns { get; set; }
    }

    private class InternDto
    {
        public string FirstName { get; set; } = "";
        public string LastName { get; set; } = "";
    }
}